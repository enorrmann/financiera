// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.financiera.web;

import ar.com.norrmann.financiera.model.Tasa;
import ar.com.norrmann.financiera.web.TasaBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.DoubleRangeValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.event.CloseEvent;

privileged aspect TasaBean_Roo_ManagedBean {
    
    declare @type: TasaBean: @ManagedBean(name = "tasaBean");
    
    declare @type: TasaBean: @SessionScoped;
    
    private String TasaBean.name = "Tasas";
    
    private List<Tasa> TasaBean.allTasas;
    
    private boolean TasaBean.dataVisible = false;
    
    private List<String> TasaBean.columns;
    
    private HtmlPanelGrid TasaBean.createPanelGrid;
    
    private HtmlPanelGrid TasaBean.editPanelGrid;
    
    private HtmlPanelGrid TasaBean.viewPanelGrid;
    
    private boolean TasaBean.createDialogVisible = false;
    
    @PostConstruct
    public void TasaBean.init() {
        columns = new ArrayList<String>();
        columns.add("tasa");
        columns.add("descripcion");
    }
    
    public String TasaBean.getName() {
        return name;
    }
    
    public List<String> TasaBean.getColumns() {
        return columns;
    }
    
    public List<Tasa> TasaBean.getAllTasas() {
        return allTasas;
    }
    
    public void TasaBean.setAllTasas(List<Tasa> allTasas) {
        this.allTasas = allTasas;
    }
    
    public String TasaBean.findAllTasas() {
        allTasas = Tasa.findAllTasas();
        dataVisible = !allTasas.isEmpty();
        return null;
    }
    
    public boolean TasaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TasaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TasaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TasaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TasaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TasaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TasaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TasaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TasaBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText tasaCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasaCreateOutput.setId("tasaCreateOutput");
        tasaCreateOutput.setValue("Tasa: * ");
        htmlPanelGrid.getChildren().add(tasaCreateOutput);
        
        InputText tasaCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tasaCreateInput.setId("tasaCreateInput");
        tasaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tasaBean.tasa.tasa}", BigDecimal.class));
        tasaCreateInput.setRequired(true);
        DoubleRangeValidator tasaCreateInputValidator = new DoubleRangeValidator();
        tasaCreateInputValidator.setMinimum(0.01);
        tasaCreateInput.addValidator(tasaCreateInputValidator);
        htmlPanelGrid.getChildren().add(tasaCreateInput);
        
        Message tasaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasaCreateInputMessage.setId("tasaCreateInputMessage");
        tasaCreateInputMessage.setFor("tasaCreateInput");
        tasaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasaCreateInputMessage);
        
        HtmlOutputText descripcionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionCreateOutput.setId("descripcionCreateOutput");
        descripcionCreateOutput.setValue("Descripcion:   ");
        htmlPanelGrid.getChildren().add(descripcionCreateOutput);
        
        InputText descripcionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionCreateInput.setId("descripcionCreateInput");
        descripcionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tasaBean.tasa.descripcion}", String.class));
        htmlPanelGrid.getChildren().add(descripcionCreateInput);
        
        Message descripcionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionCreateInputMessage.setId("descripcionCreateInputMessage");
        descripcionCreateInputMessage.setFor("descripcionCreateInput");
        descripcionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TasaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText tasaEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasaEditOutput.setId("tasaEditOutput");
        tasaEditOutput.setValue("Tasa: * ");
        htmlPanelGrid.getChildren().add(tasaEditOutput);
        
        InputText tasaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tasaEditInput.setId("tasaEditInput");
        tasaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tasaBean.tasa.tasa}", BigDecimal.class));
        tasaEditInput.setRequired(true);
        DoubleRangeValidator tasaEditInputValidator = new DoubleRangeValidator();
        tasaEditInputValidator.setMinimum(0.01);
        tasaEditInput.addValidator(tasaEditInputValidator);
        htmlPanelGrid.getChildren().add(tasaEditInput);
        
        Message tasaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tasaEditInputMessage.setId("tasaEditInputMessage");
        tasaEditInputMessage.setFor("tasaEditInput");
        tasaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tasaEditInputMessage);
        
        HtmlOutputText descripcionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionEditOutput.setId("descripcionEditOutput");
        descripcionEditOutput.setValue("Descripcion:   ");
        htmlPanelGrid.getChildren().add(descripcionEditOutput);
        
        InputText descripcionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionEditInput.setId("descripcionEditInput");
        descripcionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tasaBean.tasa.descripcion}", String.class));
        htmlPanelGrid.getChildren().add(descripcionEditInput);
        
        Message descripcionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionEditInputMessage.setId("descripcionEditInputMessage");
        descripcionEditInputMessage.setFor("descripcionEditInput");
        descripcionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TasaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText tasaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasaLabel.setId("tasaLabel");
        tasaLabel.setValue("Tasa:   ");
        htmlPanelGrid.getChildren().add(tasaLabel);
        
        HtmlOutputText tasaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tasaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tasaBean.tasa.tasa}", String.class));
        htmlPanelGrid.getChildren().add(tasaValue);
        
        HtmlOutputText descripcionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionLabel.setId("descripcionLabel");
        descripcionLabel.setValue("Descripcion:   ");
        htmlPanelGrid.getChildren().add(descripcionLabel);
        
        HtmlOutputText descripcionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionValue.setId("descripcionValue");
        descripcionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tasaBean.tasa.descripcion}", String.class));
        htmlPanelGrid.getChildren().add(descripcionValue);
        
        return htmlPanelGrid;
    }
    
    public String TasaBean.onEdit() {
        return null;
    }
    
    public boolean TasaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TasaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TasaBean.displayList() {
        createDialogVisible = false;
        findAllTasas();
        return "tasa";
    }
    
    public String TasaBean.displayCreateDialog() {
        tasa = new Tasa();
        createDialogVisible = true;
        return "tasa";
    }
    
    public void TasaBean.reset() {
        tasa = null;
        createDialogVisible = false;
    }
    
    public void TasaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

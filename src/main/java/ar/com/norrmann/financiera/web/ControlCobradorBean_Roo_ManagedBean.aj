// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.financiera.web;

import ar.com.norrmann.financiera.model.Cobrador;
import ar.com.norrmann.financiera.model.ControlCobrador;
import ar.com.norrmann.financiera.model.Pago;
import ar.com.norrmann.financiera.web.ControlCobradorBean;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.event.CloseEvent;

privileged aspect ControlCobradorBean_Roo_ManagedBean {
    
    declare @type: ControlCobradorBean: @ManagedBean(name = "controlCobradorBean");
    
    declare @type: ControlCobradorBean: @SessionScoped;
    
    private String ControlCobradorBean.name = "ControlCobradors";
    
    private ControlCobrador ControlCobradorBean.controlCobrador;
    
    private List<ControlCobrador> ControlCobradorBean.allControlCobradors;
    
    private boolean ControlCobradorBean.dataVisible = false;
    
    private List<String> ControlCobradorBean.columns;
    
    private HtmlPanelGrid ControlCobradorBean.createPanelGrid;
    
    private HtmlPanelGrid ControlCobradorBean.editPanelGrid;
    
    private HtmlPanelGrid ControlCobradorBean.viewPanelGrid;
    
    private boolean ControlCobradorBean.createDialogVisible = false;
    
    private List<Pago> ControlCobradorBean.selectedPagoList;
    
    @PostConstruct
    public void ControlCobradorBean.init() {
        columns = new ArrayList<String>();
        columns.add("totalCobrado");
        columns.add("fecha");
        columns.add("montoEntregado");
        columns.add("montoDevuelto");
    }
    
    public String ControlCobradorBean.getName() {
        return name;
    }
    
    public List<String> ControlCobradorBean.getColumns() {
        return columns;
    }
    
    public List<ControlCobrador> ControlCobradorBean.getAllControlCobradors() {
        return allControlCobradors;
    }
    
    public void ControlCobradorBean.setAllControlCobradors(List<ControlCobrador> allControlCobradors) {
        this.allControlCobradors = allControlCobradors;
    }
    
    public String ControlCobradorBean.findAllControlCobradors() {
        allControlCobradors = ControlCobrador.findAllControlCobradors();
        dataVisible = !allControlCobradors.isEmpty();
        return null;
    }
    
    public boolean ControlCobradorBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ControlCobradorBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ControlCobradorBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ControlCobradorBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ControlCobradorBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ControlCobradorBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ControlCobradorBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ControlCobradorBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public ControlCobrador ControlCobradorBean.getControlCobrador() {
        if (controlCobrador == null) {
            controlCobrador = new ControlCobrador();
        }
        return controlCobrador;
    }
    
    public void ControlCobradorBean.setControlCobrador(ControlCobrador controlCobrador) {
        this.controlCobrador = controlCobrador;
    }
    
    public List<Pago> ControlCobradorBean.getSelectedPagoList() {
        return selectedPagoList;
    }
    
    public List<Cobrador> ControlCobradorBean.completeCobrador(String query) {
        List<Cobrador> suggestions = new ArrayList<Cobrador>();
        for (Cobrador cobrador : Cobrador.findAllCobradors()) {
            String cobradorStr = String.valueOf(cobrador.getApellidos() +  " "  + cobrador.getNombres());
            if (cobradorStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(cobrador);
            }
        }
        return suggestions;
    }
    
    public String ControlCobradorBean.onEdit() {
        if (controlCobrador != null && controlCobrador.getPagoList() != null) {
            selectedPagoList = new ArrayList<Pago>(controlCobrador.getPagoList());
        }
        return null;
    }
    
    public boolean ControlCobradorBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ControlCobradorBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ControlCobradorBean.displayList() {
        createDialogVisible = false;
        findAllControlCobradors();
        return "controlCobrador";
    }
    
    public String ControlCobradorBean.displayCreateDialog() {
        controlCobrador = new ControlCobrador();
        createDialogVisible = true;
        return "controlCobrador";
    }
    
    public String ControlCobradorBean.delete() {
        controlCobrador.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllControlCobradors();
    }
    
    public void ControlCobradorBean.reset() {
        controlCobrador = null;
        selectedPagoList = null;
        createDialogVisible = false;
    }
    
    public void ControlCobradorBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

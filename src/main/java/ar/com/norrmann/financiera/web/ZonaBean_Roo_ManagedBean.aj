// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.financiera.web;

import ar.com.norrmann.financiera.model.Zona;
import ar.com.norrmann.financiera.web.ZonaBean;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.event.CloseEvent;

privileged aspect ZonaBean_Roo_ManagedBean {
    
    declare @type: ZonaBean: @ManagedBean(name = "zonaBean");
    
    declare @type: ZonaBean: @SessionScoped;
    
    private String ZonaBean.name = "Zonas";
    
    private List<Zona> ZonaBean.allZonas;
    
    private boolean ZonaBean.dataVisible = false;
    
    private List<String> ZonaBean.columns;
    
    private HtmlPanelGrid ZonaBean.createPanelGrid;
    
    private HtmlPanelGrid ZonaBean.editPanelGrid;
    
    private HtmlPanelGrid ZonaBean.viewPanelGrid;
    
    private boolean ZonaBean.createDialogVisible = false;
    
    @PostConstruct
    public void ZonaBean.init() {
        columns = new ArrayList<String>();
        columns.add("zona");
        columns.add("descripcion");
    }
    
    public String ZonaBean.getName() {
        return name;
    }
    
    public List<String> ZonaBean.getColumns() {
        return columns;
    }
    
    public List<Zona> ZonaBean.getAllZonas() {
        return allZonas;
    }
    
    public void ZonaBean.setAllZonas(List<Zona> allZonas) {
        this.allZonas = allZonas;
    }
    
    public String ZonaBean.findAllZonas() {
        allZonas = Zona.findAllZonas();
        dataVisible = !allZonas.isEmpty();
        return null;
    }
    
    public boolean ZonaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ZonaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ZonaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ZonaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ZonaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ZonaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ZonaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ZonaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ZonaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText zonaEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        zonaEditOutput.setId("zonaEditOutput");
        zonaEditOutput.setValue("Zona: * ");
        htmlPanelGrid.getChildren().add(zonaEditOutput);
        
        InputText zonaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        zonaEditInput.setId("zonaEditInput");
        zonaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{zonaBean.zona.zona}", String.class));
        htmlPanelGrid.getChildren().add(zonaEditInput);
        
        Message zonaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        zonaEditInputMessage.setId("zonaEditInputMessage");
        zonaEditInputMessage.setFor("zonaEditInput");
        zonaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(zonaEditInputMessage);
        
        HtmlOutputText descripcionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionEditOutput.setId("descripcionEditOutput");
        descripcionEditOutput.setValue("Descripcion:   ");
        htmlPanelGrid.getChildren().add(descripcionEditOutput);
        
        InputText descripcionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionEditInput.setId("descripcionEditInput");
        descripcionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{zonaBean.zona.descripcion}", String.class));
        htmlPanelGrid.getChildren().add(descripcionEditInput);
        
        Message descripcionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionEditInputMessage.setId("descripcionEditInputMessage");
        descripcionEditInputMessage.setFor("descripcionEditInput");
        descripcionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ZonaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText zonaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        zonaLabel.setId("zonaLabel");
        zonaLabel.setValue("Zona:   ");
        htmlPanelGrid.getChildren().add(zonaLabel);
        
        HtmlOutputText zonaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        zonaValue.setId("zonaValue");
        zonaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{zonaBean.zona.zona}", String.class));
        htmlPanelGrid.getChildren().add(zonaValue);
        
        HtmlOutputText descripcionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionLabel.setId("descripcionLabel");
        descripcionLabel.setValue("Descripcion:   ");
        htmlPanelGrid.getChildren().add(descripcionLabel);
        
        HtmlOutputText descripcionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionValue.setId("descripcionValue");
        descripcionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{zonaBean.zona.descripcion}", String.class));
        htmlPanelGrid.getChildren().add(descripcionValue);
        
        return htmlPanelGrid;
    }
    
    public String ZonaBean.onEdit() {
        return null;
    }
    
    public boolean ZonaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ZonaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ZonaBean.displayList() {
        createDialogVisible = false;
        findAllZonas();
        return "zona";
    }
    
    public String ZonaBean.displayCreateDialog() {
        zona = new Zona();
        createDialogVisible = true;
        return "zona";
    }
    
    public void ZonaBean.reset() {
        zona = null;
        createDialogVisible = false;
    }
    
    public void ZonaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

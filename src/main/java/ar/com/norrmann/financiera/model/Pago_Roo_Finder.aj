// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.financiera.model;

import ar.com.norrmann.financiera.model.Cuota;
import ar.com.norrmann.financiera.model.Pago;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Pago_Roo_Finder {
    
    public static TypedQuery<Pago> Pago.findPagoesByCuota(Cuota cuota) {
        if (cuota == null) throw new IllegalArgumentException("The cuota argument is required");
        EntityManager em = Pago.entityManager();
        TypedQuery<Pago> q = em.createQuery("SELECT o FROM Pago AS o WHERE o.cuota = :cuota", Pago.class);
        q.setParameter("cuota", cuota);
        return q;
    }
    
    public static TypedQuery<Pago> Pago.findPagoesByFechaPagoBetween(Date minFechaPago, Date maxFechaPago) {
        if (minFechaPago == null) throw new IllegalArgumentException("The minFechaPago argument is required");
        if (maxFechaPago == null) throw new IllegalArgumentException("The maxFechaPago argument is required");
        EntityManager em = Pago.entityManager();
        TypedQuery<Pago> q = em.createQuery("SELECT o FROM Pago AS o WHERE o.fechaPago BETWEEN :minFechaPago AND :maxFechaPago", Pago.class);
        q.setParameter("minFechaPago", minFechaPago);
        q.setParameter("maxFechaPago", maxFechaPago);
        return q;
    }
    
    public static TypedQuery<Pago> Pago.findPagoesByFechaPagoEquals(Date fechaPago) {
        if (fechaPago == null) throw new IllegalArgumentException("The fechaPago argument is required");
        EntityManager em = Pago.entityManager();
        TypedQuery<Pago> q = em.createQuery("SELECT o FROM Pago AS o WHERE o.fechaPago = :fechaPago", Pago.class);
        q.setParameter("fechaPago", fechaPago);
        return q;
    }
    
}
